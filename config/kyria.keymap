/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define GAMING  1
#define MACRO   2
#define LOWER   3
#define RAISE   4
#define ADJUST  5


&mt {
    tapping-term-ms = <170>;
};

&sl {
    release-after-ms = <5000>;
};

/ {
    macros {
        poe_ho: poe_ho {
            compatible = "zmk,behavior-macro";
            wait-ms = <5>;
            tap-ms = <5>;
            #binding-cells = <0>;
            bindings
                = <&kp RET>
                , <&kp FSLH &kp H &kp I &kp D &kp E &kp O &kp U &kp T>
                , <&kp RET>;
        };
        poe_rst_xp: poe_rst_xp {
            compatible = "zmk,behavior-macro";
            wait-ms = <5>;
            tap-ms = <5>;
            #binding-cells = <0>;
            bindings
                = <&kp RET>
                , <&kp FSLH &kp R &kp E &kp S &kp E &kp T &kp UNDER &kp X &kp P>
                , <&kp RET>;
        };
        poe_gf: poe_gamble_filter {
            compatible = "zmk,behavior-macro";
            wait-ms = <5>;
            tap-ms = <5>;
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp F>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT>
                , <&macro_tap &kp D &kp E &kp R &kp SPACE &kp M &kp PIPE>
                , <&macro_tap &kp E &kp SQT &kp S &kp SPACE &kp R &kp PIPE>
                , <&macro_tap &kp N &kp T &kp SPACE &kp R &kp O &kp PIPE>
                , <&macro_tap &kp R &kp SPACE &kp B &kp E &kp PIPE>
                , <&macro_tap &kp V &kp Y &kp SPACE &kp B &kp PIPE>
                , <&macro_tap &kp I &kp N &kp T &kp SQT &kp PIPE>
                , <&macro_tap &kp N &kp SPACE &kp J &kp PIPE>
                , <&macro_tap &kp A &kp M &kp P &kp PIPE>
                , <&macro_tap &kp P &kp I &kp D>
                , <&macro_tap &kp DQT>;
        };
        poe_rf_mm1: poe_rf_map_mods_1 {
            compatible = "zmk,behavior-macro";
            wait-ms = <5>;
            tap-ms = <5>;
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp F>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT>
                , <&macro_tap &kp K &kp E &kp SPACE &kp C &kp PIPE>
                , <&macro_tap &kp D &kp SPACE &kp C &kp H &kp PIPE>
                , <&macro_tap &kp PERCENT &kp SPACE &kp E &kp PIPE>
                , <&macro_tap &kp M &kp SPACE &kp P &kp L &kp PIPE>
                , <&macro_tap &kp COMMA &kp SPACE &kp M &kp PIPE>
                , <&macro_tap &kp F &kp SPACE &kp L>
                , <&macro_tap &kp DQT>;
        };
        poe_rf_mm2: poe_rf_map_mods_2 {
            compatible = "zmk,behavior-macro";
            wait-ms = <5>;
            tap-ms = <5>;
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp F>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT>
                , <&macro_tap &kp M &kp SPACE &kp P &kp L &kp PIPE>
                , <&macro_tap &kp E &kp G &kp E &kp PIPE>
                , <&macro_tap &kp S &kp SPACE &kp R &kp E &kp C &kp PIPE>
                , <&macro_tap &kp L &kp O &kp C &kp PIPE>
                , <&macro_tap &kp N &kp O &kp N &kp PIPE>
                , <&macro_tap &kp S &kp S &kp SPACE &kp A &kp R &kp E>
                , <&macro_tap &kp DQT>;
        };
        poe_rf_mm3: poe_rm_map_mods_3 {
            compatible = "zmk,behavior-macro";
            wait-ms = <5>;
            tap-ms = <5>;
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp F>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT>
                , <&macro_tap &kp M &kp SPACE &kp P &kp L &kp PIPE>
                , <&macro_tap &kp E &kp G &kp E &kp PIPE>
                , <&macro_tap &kp S &kp SPACE &kp R &kp E &kp C &kp PIPE>
                , <&macro_tap &kp L &kp O &kp C &kp PIPE>
                , <&macro_tap &kp N &kp O &kp N &kp PIPE>
                , <&macro_tap &kp S &kp S &kp SPACE &kp A &kp R &kp E &kp PIPE>
                , <&macro_tap &kp N &kp S &kp E &kp C &kp R &kp A &kp T &kp E &kp PIPE>
                , <&macro_tap &kp M &kp SPACE &kp L &kp I &kp PIPE>
                , <&macro_tap &kp P &kp O &kp S &kp S>
                , <&macro_tap &kp DQT>;
        };
    };
};

/ {
    behaviors {
        aasp: a_asperand {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp AT>;
            mods = <MOD_LALT>;
        };

        bsdel: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };

        ccaps: cw_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colsem: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comque: comma_question {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dotexc: dot_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dqttilde: dquote_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        fslast: fslash_asterisk {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp ASTERISK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <145>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lparbrc: lparen_lbrace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LBRC>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT)>;
        };

        minplus: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rparbrc: rparen_rbrace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp RBRC>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT)>;
        };

        sqttick: squote_backtick {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        underdollar: underscore_dollar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UNDERSCORE>, <&kp DOLLAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "alpha";
            // -------------------------------------------------------------------------------------------------------------------------------------
            // |   ESC  |  J  |  F  |  M   |  P   |  V   |                                          |  - + |   U   |   O   |  Y   |   K   |   |  |
            // | L CTRL |  R  |  S  |  N   |  T   |  G   |                                          |  / * |   A   |   E   |  I   |   H   |   \  |
            // |  SHIFT |  X  |  C  |  L   |  D   |  B   |  NONE   |   NONE  |  |   NONE  |  NONE   |  _ ~ |  , ?  |  . !  |  ' " |   `   |   `  |
            //                      | MUTE | TAB  | DEL  |  SCLN   |   ESC   |  |   ENT   |  SPACE  | BSPC | R ALT |  NONE |
            bindings = <
                &lt LOWER ESC  &kp J      &kp F      &kp M       &kp P       &kp V                                                              &minplus     &kp U        &kp O       &kp Y      &kp K      &kp PIPE
                &mt LCTRL BSPC &hm LALT R &hm LGUI S &hm LSHFT N &hm LCTRL T &kp G                                                              &fslast      &hm RCTRL A  &hm RSHFT E &hm RGUI I &hm LALT H &hm RALT BSLH
                &kp LSHFT      &kp X      &kp C      &kp L       &kp D       &kp B   &none          &none         &none         &none           &underdollar &comque      &dotexc     &dqttilde  &sqttick   &kp GRAVE
                                                     &sl MACRO   &kp TAB     &kp DEL &lt LOWER SCLN &lt RAISE ESC &lt RAISE RET &lt LOWER SPACE &kp BSPC     &kp RALT     &sl ADJUST
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        gaming_layer {
            display-name = "gaming";
            bindings = <
                &hm LALT ESC  &kp J &kp F &kp M      &kp P   &kp V                                                            &minplus     &kp U        &kp O       &kp Y      &kp K      &kp PIPE
                &mt LCTRL TAB &kp R &kp S &kp N      &kp T   &kp G                                                            &fslast      &hm RCTRL A  &hm RSHFT E &hm RGUI I &hm LALT H &hm RALT BSLH
                &kp LSHFT     &kp X &kp C &kp L      &kp D   &kp B   &none    &none             &none         &none           &underdollar &comque      &dotexc     &dqttilde  &sqttick   &kp GRAVE
                                          &kp C_MUTE &kp TAB &kp DEL &kp SCLN &lt RAISE ESC     &lt RAISE RET &lt LOWER SPACE &kp BSPC     &kp RALT     &sl ADJUST
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        macro_layer {
            display-name = "macro";
            bindings = <
                &none &none &poe_ho     &poe_rst_xp &poe_gf     &none                           &none &none &none &none &none &none
                &none &none &poe_rf_mm1 &poe_rf_mm2 &poe_rf_mm3 &none                           &none &none &none &none &none &none
                &none &none &none       &none       &none       &none &none &none   &none &none &none &none &none &none &none &none
                                        &none       &none       &none &none &none   &none &none &none &none &none
            >;
        };

        lower_layer {
            display-name = "lower";
            bindings = <
                &trans &kp AT    &kp LBKT &kp RBKT &kp HASH  &kp CARET                                      &kp LPAR  &kp N7  &kp N8 &kp N9 &kp RPAR  &none
                &trans &kp TILDE &kp PIPE &kp BSLH &kp UNDER &kp DLLR                                       &kp MINUS &kp N4  &kp N5 &kp N6 &kp ASTRK &none
                &trans &kp PRCNT &kp LBRC &kp RBRC &kp EXCL  &kp AMPS  &none     &none     &none     &none  &kp PLUS  &kp N1  &kp N2 &kp N3 &kp FSLH  &none
                                          &none    &none     &kp MINUS &kp COLON &kp SEMI  &kp EQUAL &kp N0 &kp COMMA &kp DOT &none
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        raise_layer {
            display-name = "raise";
            bindings = <
                &trans &kp F12 &kp F7 &kp F8 &kp F9 &kp PSCRN                                        &kp INS &kp HOME   &kp PG_DN  &kp PG_UP  &kp END   &none
                &trans &kp F11 &kp F4 &kp F5 &kp F6 &kp CAPS                                         &none   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT &none
                &trans &kp F10 &kp F1 &kp F2 &kp F3 &kp PAUSE_BREAK &none   &none    &none   &none   &none   &kp C_PREV &kp C_PLAY &kp C_NEXT &none     &none
                                      &trans &trans &trans          &trans  &trans   &trans  &trans  &trans  &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        adjust_layer {
            display-name = "adjust";
            bindings = <
                &none &rgb_ug RGB_TOG   &rgb_ug RGB_HUI &rgb_ug RGB_HUD &rgb_ug RGB_SAI &rgb_ug RGB_SAD                 &rgb_ug RGB_TOG &sys_reset   &bootloader  &none        &none &none
                &none &ext_power EP_TOG &rgb_ug RGB_BRI &rgb_ug RGB_BRD &none           &none                           &none           &bt BT_CLR   &none        &none        &none &none
                &none &out OUT_TOG      &none           &none           &none           &none &none &none  &none &none  &none           &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &none &none
                                        &none           &none           &none           &none &none &none  &tog GAMING  &none           &none        &none
            >;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_z {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp Z>;
        };
        combo_macro_layer {
            timeout-ms = <50>;
            key-positions = <1 5>;
            layers = <DEFAULT GAMING>;
            bindings = <&sl MACRO>;
        };
        combo_lbracket {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp LBKT>;
        };
        combo_rbracket {
            timeout-ms = <50>;
            key-positions = <3 4>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp RBKT>;
        };
        combo_q {
            timeout-ms = <50>;
            key-positions = <4 5>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp Q>;
        };
        combo_underscore {
            timeout-ms = <50>;
            key-positions = <6 7>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp UNDERSCORE>;
        };
        combo_adjust_layer {
            timeout-ms = <50>;
            key-positions = <6 10>;
            layers = <DEFAULT GAMING>;
            bindings = <&sl ADJUST>;
        };
        combo_tilde {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp TILDE>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp TAB>;
        };
        combo_caps {
            timeout-ms = <50>;
            key-positions = <13 16>;
            layers = <DEFAULT GAMING>;
            bindings = <&ccaps>;
        };
        combo_lparbrace {
            timeout-ms = <50>;
            key-positions = <14 15>;
            layers = <DEFAULT GAMING>;
            bindings = <&lparbrc>;
        };
        combo_rparbrace {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <DEFAULT GAMING>;
            bindings = <&rparbrc>;
        };
        combo_w {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp W>;
        };
        combo_select_all {
            timeout-ms = <50>;
            key-positions = <18 19>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp LC(A)>;
        };
        combo_ae {
            timeout-ms = <50>;
            key-positions = <19 20>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp RA(A)>;
        };
        combo_oe {
            timeout-ms = <50>;
            key-positions = <19 21>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp RA(O)>;
        };
        combo_aa {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp RA(W)>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <26 27>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp LC(C)>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <26 28>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp LC(X)>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp LC(V)>;
        };
        combo_undo {
            timeout-ms = <50>;
            key-positions = <25 26>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp LC(Z)>;
        };
        combo_gt {
            timeout-ms = <50>;
            key-positions = <36 37>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp GT>;
        };
        combo_lt {
            timeout-ms = <50>;
            key-positions = <35 36>;
            layers = <DEFAULT GAMING>;
            bindings = <&kp LT>;
        };
    };
};

/* vim: set ft=dts: */
